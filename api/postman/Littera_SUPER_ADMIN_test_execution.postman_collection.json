{
	"info": {
		"_postman_id": "3e964d48-ea4f-4ad5-b5b8-8b2967951962",
		"name": "Littera SUPER_ADMIN test execution",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Core API",
			"item": [
				{
					"name": "Actuator",
					"item": [
						{
							"name": "ACTUATOR HEALTH",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/actuator/health",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"actuator",
										"health"
									]
								},
								"description": "API Actuator endpoint."
							},
							"response": []
						},
						{
							"name": "ACTUATOR INFO",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/actuator/info",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"actuator",
										"info"
									]
								},
								"description": "API Actuator endpoint.\n"
							},
							"response": []
						}
					]
				},
				{
					"name": "Littera Authorization",
					"item": [
						{
							"name": "Authorization",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/api/v1/authorization",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"v1",
										"authorization"
									]
								},
								"description": "Test the API Authorization endpoint. Should work with all user roles (ROLE_SUPER_ADMIN, ROLE_LITTERA_LTI, ROLE_ORG_ADMIN, ROLE_TEAM_LEAD, ROLE_TUTOR, ROLE_TEACHER, ROLE_STUDENT).\n\nTo execute set the user accessToken from cognito to the \"authentication_token\" variable. 'OK' status should be returned."
							},
							"response": []
						},
						{
							"name": "Authorization NO AUTH",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 403\", function () {",
											"    pm.response.to.have.status(403);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{base_url}}/api/v1/authorization",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"v1",
										"authorization"
									]
								},
								"description": "Test the API Authorization endpoint without sending a HTTP Authorization header. 'Forbidden' status should be returned."
							},
							"response": []
						}
					]
				},
				{
					"name": "Organization REST Service",
					"item": [
						{
							"name": "Get Organizations",
							"item": [
								{
									"name": "Get Organizations",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{base_url}}/api/v1/organizations",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"api",
												"v1",
												"organizations"
											]
										},
										"description": "Test the API Get Organizations endpoint. 'OK' status should be returned."
									},
									"response": []
								},
								{
									"name": "Get Organizations PAGINATION",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response body data length is equal to 1\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.data.length).to.eql(1);",
													"});",
													"",
													"pm.test(\"Response body meta page is equal to 2\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.meta.page).to.eql(2);",
													"});",
													"",
													"pm.test(\"Response body meta size is equal to 1\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.meta.size).to.eql(1);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{base_url}}/api/v1/organizations?page=2&size=1",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"api",
												"v1",
												"organizations"
											],
											"query": [
												{
													"key": "page",
													"value": "2"
												},
												{
													"key": "size",
													"value": "1"
												}
											]
										},
										"description": "Test the API Get Organizations endpoint pagination. 'OK' status should be returned."
									},
									"response": []
								},
								{
									"name": "Get Organizations NO AUTH",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{base_url}}/api/v1/organizations",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"api",
												"v1",
												"organizations"
											]
										},
										"description": "Test the API Get Organizations endpoint without sending a HTTP Authorization header. 'Forbidden' status should be returned."
									},
									"response": []
								}
							]
						},
						{
							"name": "Create Organizations",
							"item": [
								{
									"name": "Create Organization",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"Test Organization {{$timestamp}}\",\n    \"slug\": \"test_slug_{{$timestamp}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/api/v1/organizations",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"api",
												"v1",
												"organizations"
											]
										},
										"description": "Test the API Create Organization endpoint. 'Created' status should be returned."
									},
									"response": []
								},
								{
									"name": "Create Organization NO AUTH",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"Test Org {{$timestamp}}\",\n    \"slug\": \"test_slug_{{$timestamp}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/api/v1/organizations",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"api",
												"v1",
												"organizations"
											]
										},
										"description": "Test the API Create organization endpoint without sending a HTTP Authorization header. 'Forbidden' status should be returned."
									},
									"response": []
								}
							]
						},
						{
							"name": "Update Organizations",
							"item": [
								{
									"name": "Update Organization",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"Edify QA 2 {{$timestamp}}\",\n    \"slug\": \"edify-qa2{{$timestamp}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/api/v1/organizations/{{edifyqa2_org_id}}",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"api",
												"v1",
												"organizations",
												"{{edifyqa2_org_id}}"
											]
										},
										"description": "Test the API Update organization endpoint. 'OK' status should be returned."
									},
									"response": []
								},
								{
									"name": "Update Organization NE ORG ID",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 404\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(\"Organization not found error message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorMessage).to.eql(\"The organization was not found\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"Edify QA 2 {{$timestamp}}\",\n    \"slug\": \"edify-qa2-{{$timestamp}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/api/v1/organizations/{{ne_id}}",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"api",
												"v1",
												"organizations",
												"{{ne_id}}"
											]
										},
										"description": "Test the API Update organization endpoint sending a non existent Organization ID. 'Not Found' status should be returned."
									},
									"response": []
								},
								{
									"name": "Update Organization NO AUTH",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"Edify QA 2 {{$timestamp}}\",\n    \"slug\": \"edify-qa2{{$timestamp}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/api/v1/organizations/{{edifyqa2_org_id}}",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"api",
												"v1",
												"organizations",
												"{{edifyqa2_org_id}}"
											]
										},
										"description": "Test the API Update organization endpoint without sending a HTTP Authorization header. 'Forbidden' status should be returned."
									},
									"response": []
								}
							]
						}
					],
					"description": "Endpoints related to organizations",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "User REST Service",
					"item": [
						{
							"name": "Get Users",
							"item": [
								{
									"name": "Get Users",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{base_url}}/api/v1/organizations/{{edifyqa_org_id}}/users",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"api",
												"v1",
												"organizations",
												"{{edifyqa_org_id}}",
												"users"
											]
										},
										"description": "Test the API Get Users per Organization endpoint. 'OK' status should be returned."
									},
									"response": []
								},
								{
									"name": "Get Users PAGINATION",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response body data length is equal to 1\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.data.length).to.eql(1);",
													"});",
													"",
													"pm.test(\"Response body meta page is equal to 2\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.meta.page).to.eql(2);",
													"});",
													"",
													"pm.test(\"Response body meta size is equal to 1\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.meta.size).to.eql(1);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{base_url}}/api/v1/organizations/{{edifyqa_org_id}}/users?page=2&size=1",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"api",
												"v1",
												"organizations",
												"{{edifyqa_org_id}}",
												"users"
											],
											"query": [
												{
													"key": "page",
													"value": "2"
												},
												{
													"key": "size",
													"value": "1"
												}
											]
										},
										"description": "Test the API Get Users per Organization endpoint pagination. 'OK' status should be returned."
									},
									"response": []
								},
								{
									"name": "Get Users NO AUTH",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{base_url}}/api/v1/organizations/{{edifyqa_org_id}}/users",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"api",
												"v1",
												"organizations",
												"{{edifyqa_org_id}}",
												"users"
											]
										},
										"description": "Test the API Get Users per Organization endpoint without sending a HTTP Authorization header. 'Forbidden' status should be returned."
									},
									"response": []
								}
							]
						},
						{
							"name": "Add Users",
							"item": [
								{
									"name": "Add Users to Organization",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"firstName\": \"Test First Name {{$timestamp}}\",\n    \"lastName\": \"Test Last Name {{$timestamp}}\",\n    \"roles\": [\"ROLE_STUDENT\"],\n    \"enabled\": true\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/api/v1/organizations/{{edifyqa_org_id}}/users",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"api",
												"v1",
												"organizations",
												"{{edifyqa_org_id}}",
												"users"
											]
										},
										"description": "Test the API Add users to Organization endpoint. 'Created' status should be returned."
									},
									"response": []
								},
								{
									"name": "Add Users to Organization NE ORG ID",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 404\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(\"Organization not found error message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorMessage).to.eql(\"Organization not found\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"firstName\": \"Test First Name\",\n    \"lastName\": \"Test Last Name\",\n    \"roles\": [\"ROLE_STUDENT\"],\n    \"enabled\": true\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/api/v1/organizations/{{ne_id}}/users",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"api",
												"v1",
												"organizations",
												"{{ne_id}}",
												"users"
											]
										},
										"description": "Test the API Add users to Organization endpoint sending a non existent Organization ID. 'Not Found' status should be returned."
									},
									"response": []
								},
								{
									"name": "Add Users to Organization NA ROLE",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Roles provided not allowed error message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorMessage).to.eql(\"Roles provided are not allowed to add\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"firstName\": \"Test First Name {{$timestamp}}\",\n    \"lastName\": \"Test Last Name {{$timestamp}}\",\n    \"roles\": [\"ROLE_SUPER_ADMIN\"],\n    \"enabled\": true\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/api/v1/organizations/{{edifyqa_org_id}}/users",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"api",
												"v1",
												"organizations",
												"{{edifyqa_org_id}}",
												"users"
											]
										},
										"description": "Test the API Add users to Organization endpoint sending a not applicable role. 'Bad Request' status should be returned."
									},
									"response": []
								},
								{
									"name": "Add Users to Organization NO AUTH",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"firstName\": \"Test First Name {{$timestamp}}\",\n    \"lastName\": \"Test Last Name {{$timestamp}}\",\n    \"roles\": [\"ROLE_TUTOR\"],\n    \"enabled\": true\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/api/v1/organizations/{{edifyqa_org_id}}/users",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"api",
												"v1",
												"organizations",
												"{{edifyqa_org_id}}",
												"users"
											]
										},
										"description": "Test the API Add users to Organization endpoint without sending a HTTP Authorization header. 'Forbidden' status should be returned."
									},
									"response": []
								}
							]
						},
						{
							"name": "Update Users",
							"item": [
								{
									"name": "Update User",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"firstName\": \"Christopher {{$timestamp}}\",\n    \"lastName\": \"Solís {{$timestamp}}\",\n    \"enabled\": true\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/api/v1/organizations/{{edifyqa_org_id}}/users/{{user_id}}",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"api",
												"v1",
												"organizations",
												"{{edifyqa_org_id}}",
												"users",
												"{{user_id}}"
											]
										},
										"description": "Test the API Update user endpoint. 'OK' status should be returned."
									},
									"response": []
								},
								{
									"name": "Update User NE ORG ID",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 404\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(\"Organization not found error message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorMessage).to.eql(\"Organization not found\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"firstName\": \"Christopher {{$timestamp}}\",\n    \"lastName\": \"Solís {{$timestamp}}\",\n    \"enabled\": true\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/api/v1/organizations/{{ne_id}}/users/{{user_id}}",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"api",
												"v1",
												"organizations",
												"{{ne_id}}",
												"users",
												"{{user_id}}"
											]
										},
										"description": "Test the API Update user endpoint sending a non existent Organization ID. 'Not Found' status should be returned."
									},
									"response": []
								},
								{
									"name": "Update User NE USER ID",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 404\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(\"User not found error mesagge\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorMessage).to.eql(\"User not found\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"firstName\": \"Christopher {{$timestamp}}\",\n    \"lastName\": \"Solís {{$timestamp}}\",\n    \"enabled\": true\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/api/v1/organizations/{{edifyqa_org_id}}/users/{{ne_id}}",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"api",
												"v1",
												"organizations",
												"{{edifyqa_org_id}}",
												"users",
												"{{ne_id}}"
											]
										},
										"description": "Test the API Update user endpoint sending a non existent User ID. 'Not Found' status should be returned."
									},
									"response": []
								},
								{
									"name": "Update User NO AUTH",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"firstName\": \"Christopher {{$timestamp}}\",\n    \"lastName\": \"Solís {{$timestamp}}\",\n    \"enabled\": true\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/api/v1/organizations/{{edifyqa_org_id}}/users/{{user_id}}",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"api",
												"v1",
												"organizations",
												"{{edifyqa_org_id}}",
												"users",
												"{{user_id}}"
											]
										},
										"description": "Test the API Update user endpoint without sending a HTTP Authorization header. 'Forbidden' status should be returned."
									},
									"response": []
								}
							]
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "File REST Service",
					"item": [
						{
							"name": "Get Signed Download URL",
							"item": [
								{
									"name": "Get Signed download URL",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{base_url}}/api/v1/organizations/{{edifyqa_org_id}}/files/{{edifyqa_contentfile_id}}/download-url",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"api",
												"v1",
												"organizations",
												"{{edifyqa_org_id}}",
												"files",
												"{{edifyqa_contentfile_id}}",
												"download-url"
											]
										},
										"description": "Test the API Get Signed download URL endpoint. 'OK' status should be returned."
									},
									"response": []
								},
								{
									"name": "Get Signed download URL NAS CF ID",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 404\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(\"Content file not found error message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorMessage).to.eql(`The content file with id ${pm.environment.get(\"littera_contentfile_id\")} was not found`);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{base_url}}/api/v1/organizations/{{edifyqa_org_id}}/files/{{littera_contentfile_id}}/download-url",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"api",
												"v1",
												"organizations",
												"{{edifyqa_org_id}}",
												"files",
												"{{littera_contentfile_id}}",
												"download-url"
											]
										},
										"description": "Test the API Get Signed download URL endpoint. 'OK' status should be returned."
									},
									"response": []
								},
								{
									"name": "Get Signed download URL NO AUTH",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "key",
													"value": "0",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{base_url}}/api/v1/organizations/{{edifyqa_org_id}}/files/{{edifyqa_contentfile_id}}/download-url",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"api",
												"v1",
												"organizations",
												"{{edifyqa_org_id}}",
												"files",
												"{{edifyqa_contentfile_id}}",
												"download-url"
											]
										},
										"description": "Test the API Get Signed download URL endpoint without sending a HTTP Authorization header. 'Forbidden' status should be returned."
									},
									"response": []
								}
							]
						},
						{
							"name": "Get Signed Upload URL",
							"item": [
								{
									"name": "Get Signed upload URL",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{base_url}}/api/v1/organizations/{{edifyqa_org_id}}/files/upload-url?filename=testFile{{$timestamp}}.txt",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"api",
												"v1",
												"organizations",
												"{{edifyqa_org_id}}",
												"files",
												"upload-url"
											],
											"query": [
												{
													"key": "filename",
													"value": "testFile{{$timestamp}}.txt"
												}
											]
										},
										"description": "Test the API Get Signed upload URL endpoint. 'OK' status should be returned."
									},
									"response": []
								},
								{
									"name": "Get Signed upload URL NO AUTH",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{base_url}}/api/v1/organizations/{{edifyqa_org_id}}/files/upload-url?filename=testFile{{$timestamp}}.txt",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"api",
												"v1",
												"organizations",
												"{{edifyqa_org_id}}",
												"files",
												"upload-url"
											],
											"query": [
												{
													"key": "filename",
													"value": "testFile{{$timestamp}}.txt"
												}
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "UserAccount REST Service",
					"item": [
						{
							"name": "Create user accounts",
							"item": [
								{
									"name": "Create user account",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"phone\":\"+506{{$timestamp}}\",\n    \"userId\":\"{{user_id}}\",\n    \"email\":\"test.user.account{{$timestamp}}@test.com\",\n    \"username\":\"testuser{{$timestamp}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/api/v1/user-accounts",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"api",
												"v1",
												"user-accounts"
											]
										},
										"description": "Test the API Create Organization endpoint. 'Created' status should be returned."
									},
									"response": []
								},
								{
									"name": "Create user account NE USER ID",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 404\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(\"User not found error message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorMessage).to.include(`The user with id ${pm.environment.get(\"ne_id\")} was not found`);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"phone\":\"+506{{$timestamp}}\",\n    \"userId\":\"{{ne_id}}\",\n    \"email\":\"test.user.account{{$timestamp}}@edify.cr\",\n    \"username\":\"testuser{{$timestamp}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/api/v1/user-accounts",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"api",
												"v1",
												"user-accounts"
											]
										},
										"description": "Test the API Create Organization endpoint. 'Created' status should be returned."
									},
									"response": []
								},
								{
									"name": "Create user account DUP PHONE",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Already exists error message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorMessage).to.include(\"already exists in the database\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"phone\":\"+50698765432\",\n    \"userId\":\"{{user_id}}\",\n    \"email\":\"test.user.account{{$timestamp}}@edify.cr\",\n    \"username\":\"testuser{{$timestamp}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/api/v1/user-accounts",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"api",
												"v1",
												"user-accounts"
											]
										},
										"description": "Test the API Create Organization endpoint sending a duplicated phone number. 'Bad Request' status should be returned."
									},
									"response": []
								},
								{
									"name": "Create user account INCOR PHONE",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Incorrect phone format error message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorMessage).to.eql(\"Incorrect phone format\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"phone\":\"{{$timestamp}}\",\n    \"userId\":\"{{user_id}}\",\n    \"email\":\"test.user.account{{$timestamp}}@edify.cr\",\n    \"username\":\"testuser{{$timestamp}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/api/v1/user-accounts",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"api",
												"v1",
												"user-accounts"
											]
										},
										"description": "Test the API Create Organization endpoint sending a phone number with incorrect format. 'Bad Request' status should be returned."
									},
									"response": []
								},
								{
									"name": "Create user account DUP EMAIL",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Already exists error message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorMessage).to.include(\"already exists in the database\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"phone\":\"+506{{$timestamp}}\",\n    \"userId\":\"{{user_id}}\",\n    \"email\":\"test.user@test.com\",\n    \"username\":\"testuser{{$timestamp}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/api/v1/user-accounts",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"api",
												"v1",
												"user-accounts"
											]
										},
										"description": "Test the API Create Organization endpoint sending a duplicated email. 'Bad Request' status should be returned."
									},
									"response": []
								},
								{
									"name": "Create user account INCOR EMAIL",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Incorrect email format error message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorMessage).to.eql(\"Incorrect email format\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"phone\":\"+506{{$timestamp}}\",\n    \"userId\":\"{{user_id}}\",\n    \"email\":\"test+user+account{{$timestamp}}@edify.cr\",\n    \"username\":\"testuser{{$timestamp}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/api/v1/user-accounts",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"api",
												"v1",
												"user-accounts"
											]
										},
										"description": "Test the API Create Organization endpoint sending an email address with incorrect format. 'Bad Request' status should be returned."
									},
									"response": []
								},
								{
									"name": "Create user account DUP USERNAME",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Already exists error message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorMessage).to.include(\"already exists in the database\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"phone\":\"+506{{$timestamp}}\",\n    \"userId\":\"{{user_id}}\",\n    \"email\":\"test.user.account{{$timestamp}}@edify.cr\",\n    \"username\":\"testuser\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/api/v1/user-accounts",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"api",
												"v1",
												"user-accounts"
											]
										},
										"description": "Test the API Create Organization endpoint sending a duplicated username. 'Bad Request' status should be returned."
									},
									"response": []
								},
								{
									"name": "Create user account NO AUTH",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"phone\":\"+506{{$timestamp}}\",\n    \"userId\":\"3be2cccf-2ed4-40d6-8e41-13b4c45329a2\",\n    \"email\":\"test.user.account{{$timestamp}}@edify.cr\",\n    \"username\":\"testuser{{$timestamp}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/api/v1/user-accounts",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"api",
												"v1",
												"user-accounts"
											]
										},
										"description": "Test the API Create user account endpoint without sending a HTTP Authorization header. 'Forbidden' status should be returned."
									},
									"response": []
								}
							]
						},
						{
							"name": "Update user accounts",
							"item": [
								{
									"name": "Update user account",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"phone\":\"+{{$timestamp}}\",\n    \"email\":\"updated.test.email{{$timestamp}}@test.com\",\n    \"username\":\"updated_testname{{$timestamp}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/api/v1/user-accounts/{{useraccount_id}}",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"api",
												"v1",
												"user-accounts",
												"{{useraccount_id}}"
											]
										},
										"description": "Test the API Update user account endpoint. 'OK' status should be returned."
									},
									"response": []
								},
								{
									"name": "Update user account DUP PHONE",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Already exists error message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorMessage).to.include(\"already exists in the database\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"phone\":\"+50698765432\",\n    \"email\":\"updated.test.email{{$timestamp}}@test.com\",\n    \"username\":\"updated_testname{{$timestamp}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/api/v1/user-accounts/{{useraccount_id}}",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"api",
												"v1",
												"user-accounts",
												"{{useraccount_id}}"
											]
										},
										"description": "Test the API Update user account endpoint sending a duplicated phone number. 'Bad Request' status should be returned."
									},
									"response": []
								},
								{
									"name": "Update user account INCOR PHONE",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Incorrect email format error message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorMessage).to.eql(\"Incorrect phone format\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"phone\":\"{{$timestamp}}\",\n    \"email\":\"updated.test.email{{$timestamp}}@test.com\",\n    \"username\":\"updated_testname{{$timestamp}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/api/v1/user-accounts/{{useraccount_id}}",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"api",
												"v1",
												"user-accounts",
												"{{useraccount_id}}"
											]
										},
										"description": "Test the API Update user account endpoint sending a phone number with incorrect format. 'Bad Request' status should be returned."
									},
									"response": []
								},
								{
									"name": "Update user account DUP EMAIL",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Already exists error message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorMessage).to.include(\"already exists in the database\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"phone\":\"+{{$timestamp}}\",\n    \"email\":\"test.user@test.com\",\n    \"username\":\"updated_testname{{$timestamp}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/api/v1/user-accounts/{{useraccount_id}}",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"api",
												"v1",
												"user-accounts",
												"{{useraccount_id}}"
											]
										},
										"description": "Test the API Update user account endpoint sending a duplicated email. 'Bad Request' status should be returned."
									},
									"response": []
								},
								{
									"name": "Update user account INCOR EMAIL",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Incorrect email format error message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorMessage).to.eql(\"Incorrect email format\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"phone\":\"+{{$timestamp}}\",\n    \"email\":\"test+user@test.com\",\n    \"username\":\"updated_testname{{$timestamp}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/api/v1/user-accounts/{{useraccount_id}}",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"api",
												"v1",
												"user-accounts",
												"{{useraccount_id}}"
											]
										},
										"description": "Test the API Update user account endpoint sending an email address with incorrect format. 'Bad Request' status should be returned."
									},
									"response": []
								},
								{
									"name": "Update user account DUP USERNAME",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Already exists error message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorMessage).to.include(\"already exists in the database\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"phone\":\"+{{$timestamp}}\",\n    \"email\":\"updated.test.email{{$timestamp}}@test.com\",\n    \"username\":\"testuser\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/api/v1/user-accounts/{{useraccount_id}}",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"api",
												"v1",
												"user-accounts",
												"{{useraccount_id}}"
											]
										},
										"description": "Test the API Update user account endpoint sending a duplicated user name. 'Bad Request' status should be returned."
									},
									"response": []
								},
								{
									"name": "Update user account NE UA ID",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 404\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(\"User account not found error message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorMessage).to.include(`The user account with id ${pm.environment.get(\"ne_id\")} was not found`);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"phone\":\"+{{$timestamp}}\",\n    \"email\":\"updated.test.email{{$timestamp}}@test.com\",\n    \"username\":\"updated_testname{{$timestamp}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/api/v1/user-accounts/{{ne_id}}",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"api",
												"v1",
												"user-accounts",
												"{{ne_id}}"
											]
										},
										"description": "Test the API Update user account endpoint sending a non existent user account ID. 'Not Found' status should be returned."
									},
									"response": []
								},
								{
									"name": "Update user account NO AUTH",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"phone\":\"+{{$timestamp}}\",\n    \"email\":\"updated.test.email{{$timestamp}}@test.com\",\n    \"username\":\"updated_testname{{$timestamp}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/api/v1/user-accounts/{{useraccount_id}}",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"api",
												"v1",
												"user-accounts",
												"{{useraccount_id}}"
											]
										},
										"description": "Test the API Update user account endpoint without sending a HTTP Authorization header. 'Forbidden' status should be returned."
									},
									"response": []
								}
							]
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Roster File REST Service",
					"item": [
						{
							"name": "Get Roster Files",
							"item": [
								{
									"name": "Get Roster File",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{base_url}}/api/v1/organizations/{{edifyqa_org_id}}/roster-files/{{edifyqa_rosterfile_id}}",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"api",
												"v1",
												"organizations",
												"{{edifyqa_org_id}}",
												"roster-files",
												"{{edifyqa_rosterfile_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get Roster File NE RF ID",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 404\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(\"Roster file id not found error message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorMessage).to.eql(`The roster file with id ${pm.variables.get(\"ne_id\")} was not found`);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{base_url}}/api/v1/organizations/{{edifyqa_org_id}}/roster-files/{{ne_id}}",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"api",
												"v1",
												"organizations",
												"{{edifyqa_org_id}}",
												"roster-files",
												"{{ne_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get Roster File NAS RF ID",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 404\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(\"Roster file not found error message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorMessage).to.eql(`The roster file with id ${pm.environment.get(\"littera_rosterfile_id\")} was not found`);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{base_url}}/api/v1/organizations/{{edifyqa_org_id}}/roster-files/{{littera_rosterfile_id}}",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"api",
												"v1",
												"organizations",
												"{{edifyqa_org_id}}",
												"roster-files",
												"{{littera_rosterfile_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get Roster File NO AUTH",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{base_url}}/api/v1/organizations/{{edifyqa_org_id}}/roster-files/{{edifyqa_rosterfile_id}}",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"api",
												"v1",
												"organizations",
												"{{edifyqa_org_id}}",
												"roster-files",
												"{{edifyqa_rosterfile_id}}"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "Tutor REST Service",
					"item": [
						{
							"name": "Create Tutor Pools",
							"item": [
								{
									"name": "Create Tutor Pool",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"public\": true,\n    \"name\": \"Tutor pool {{$timestamp}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/api/v1/organizations/{{edifyqa_org_id}}/tutor-pools",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"api",
												"v1",
												"organizations",
												"{{edifyqa_org_id}}",
												"tutor-pools"
											]
										},
										"description": "Test the API Create Tutor Pool endpoint. 'Created' status should be returned."
									},
									"response": []
								},
								{
									"name": "Create Tutor Pool DUP NAME",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"",
													"pm.test(\"Organization already exists error message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorMessage).to.include(`already exists in the organization ${pm.environment.get(\"edifyqa_org_id\")}`);",
													"});",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"public\": true,\n    \"name\": \"Tutor pool\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/api/v1/organizations/{{edifyqa_org_id}}/tutor-pools",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"api",
												"v1",
												"organizations",
												"{{edifyqa_org_id}}",
												"tutor-pools"
											]
										},
										"description": "Test the API Create Tutor Pool endpoint sending a duplicated pool name. 'Bad Request' status should be returned."
									},
									"response": []
								},
								{
									"name": "Create Tutor Pool NO AUTH",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"public\": true,\n    \"name\": \"Tutor pool {{$timestamp}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/api/v1/organizations/{{edifyqa_org_id}}/tutor-pools",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"api",
												"v1",
												"organizations",
												"{{edifyqa_org_id}}",
												"tutor-pools"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Get Tutor Pools by Organization",
							"item": [
								{
									"name": "Get TP by Org",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{base_url}}/api/v1/organizations/{{edifyqa_org_id}}/tutor-pools",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"api",
												"v1",
												"organizations",
												"{{edifyqa_org_id}}",
												"tutor-pools"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get TP by Org PAGINATION",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response body data length is equal to 1\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.data.length).to.eql(1);",
													"});",
													"",
													"pm.test(\"Response body meta page is equal to 2\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.meta.page).to.eql(2);",
													"});",
													"",
													"pm.test(\"Response body meta size is equal to 1\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.meta.size).to.eql(1);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{base_url}}/api/v1/organizations/{{edifyqa_org_id}}/tutor-pools?page=2&size=1",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"api",
												"v1",
												"organizations",
												"{{edifyqa_org_id}}",
												"tutor-pools"
											],
											"query": [
												{
													"key": "page",
													"value": "2"
												},
												{
													"key": "size",
													"value": "1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get TP by Org NE ORG ID",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 404\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(\"Organization not found error message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorMessage).to.eql(`The organization ${pm.environment.get(\"ne_id\")} not found`);",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{base_url}}/api/v1/organizations/{{ne_id}}/tutor-pools",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"api",
												"v1",
												"organizations",
												"{{ne_id}}",
												"tutor-pools"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get TP by Org NO AUTH",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{base_url}}/api/v1/organizations/{{edifyqa_org_id}}/tutor-pools",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"api",
												"v1",
												"organizations",
												"{{edifyqa_org_id}}",
												"tutor-pools"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Get All Public Tutor Pools",
							"item": [
								{
									"name": "Get All Public Tutor Pools",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/api/v1/tutor-pools",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"api",
												"v1",
												"tutor-pools"
											]
										},
										"description": "Test the API Create Tutor Pool endpoint. 'Created' status should be returned."
									},
									"response": []
								},
								{
									"name": "Get All Public Tutor Pools PAGINATION",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response body data length is equal to 1\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.data.length).to.eql(1);",
													"});",
													"",
													"pm.test(\"Response body meta page is equal to 2\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.meta.page).to.eql(2);",
													"});",
													"",
													"pm.test(\"Response body meta size is equal to 1\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.meta.size).to.eql(1);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/api/v1/tutor-pools?page=2&size=1",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"api",
												"v1",
												"tutor-pools"
											],
											"query": [
												{
													"key": "page",
													"value": "2"
												},
												{
													"key": "size",
													"value": "1"
												}
											]
										},
										"description": "Test the API Create Tutor Pool endpoint. 'Created' status should be returned."
									},
									"response": []
								},
								{
									"name": "Get All Public Tutor NO AUTH",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/api/v1/tutor-pools",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"api",
												"v1",
												"tutor-pools"
											]
										},
										"description": "Test the API Create Tutor Pool endpoint. 'Created' status should be returned."
									},
									"response": []
								}
							]
						},
						{
							"name": "Set Enabled Tutor Pools by Organization",
							"item": [
								{
									"name": "Set Enabled TP by Org",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"tutorPoolIds\":[\"{{tp_id}}\"]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/api/v1/organizations/{{edifyqa_org_id}}/enabled-tutor-pools",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"api",
												"v1",
												"organizations",
												"{{edifyqa_org_id}}",
												"enabled-tutor-pools"
											]
										}
									},
									"response": []
								},
								{
									"name": "Set Enabled TP by Org NE ORG ID",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 404\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(\"Organization not found error message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorMessage).to.eql(`The organization ${pm.environment.get(\"ne_id\")} not found`);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"tutorPoolIds\":[\"{{tp_id}}\"]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/api/v1/organizations/{{ne_id}}/enabled-tutor-pools",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"api",
												"v1",
												"organizations",
												"{{ne_id}}",
												"enabled-tutor-pools"
											]
										}
									},
									"response": []
								},
								{
									"name": "Set Enabled TP by Org PUB TP ID",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"tutorPoolIds\":[\"{{pub_tp_id}}\"]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/api/v1/organizations/{{edifyqa_org_id}}/enabled-tutor-pools",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"api",
												"v1",
												"organizations",
												"{{edifyqa_org_id}}",
												"enabled-tutor-pools"
											]
										}
									},
									"response": []
								},
								{
									"name": "Set Enabled TP by Org PRIV TP ID",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Tutor pool does not belong to organization error message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorMessage).to.eql(\"One or more provided tutor pool IDs are not public and do not belong to the organization\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"tutorPoolIds\":[\"{{priv_tp_id}}\"]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/api/v1/organizations/{{edifyqa_org_id}}/enabled-tutor-pools",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"api",
												"v1",
												"organizations",
												"{{edifyqa_org_id}}",
												"enabled-tutor-pools"
											]
										}
									},
									"response": []
								},
								{
									"name": "Set Enabled TP by Org NO AUTH",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"tutorPoolIds\":[\"{{tp_id}}\"]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/api/v1/organizations/{{edifyqa_org_id}}/enabled-tutor-pools",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"api",
												"v1",
												"organizations",
												"{{edifyqa_org_id}}",
												"enabled-tutor-pools"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Get Enabled Tutor Pools by Organization",
							"item": [
								{
									"name": "Get Enabled TP by Org",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{base_url}}/api/v1/organizations/{{edifyqa_org_id}}/enabled-tutor-pools",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"api",
												"v1",
												"organizations",
												"{{edifyqa_org_id}}",
												"enabled-tutor-pools"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get Enabled TP by Org PAGINATION",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response body data length is equal to 1\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.data.length).to.eql(1);",
													"});",
													"",
													"pm.test(\"Response body meta page is equal to 0\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.meta.page).to.eql(0);",
													"});",
													"",
													"pm.test(\"Response body meta size is equal to 1\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.meta.size).to.eql(1);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{base_url}}/api/v1/organizations/{{edifyqa_org_id}}/enabled-tutor-pools?page=0&size=1",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"api",
												"v1",
												"organizations",
												"{{edifyqa_org_id}}",
												"enabled-tutor-pools"
											],
											"query": [
												{
													"key": "page",
													"value": "0"
												},
												{
													"key": "size",
													"value": "1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get Enabled TP by Org NE ORG ID",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 404\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(\"Organization not found error message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorMessage).to.eql(`The organization ${pm.environment.get(\"ne_id\")} not found`);",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{base_url}}/api/v1/organizations/{{ne_id}}/enabled-tutor-pools",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"api",
												"v1",
												"organizations",
												"{{ne_id}}",
												"enabled-tutor-pools"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get Enabled TP by Org NO AUTH",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{base_url}}/api/v1/organizations/{{edifyqa_org_id}}/enabled-tutor-pools",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"api",
												"v1",
												"organizations",
												"{{edifyqa_org_id}}",
												"enabled-tutor-pools"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Create Tutor Profiles",
							"item": [
								{
									"name": "Create Tutor Profile",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"timezone\":\"UTC-05\",\n    \"subjects\":[\"ENGLISH\"],\n    \"bio\":\"Test bio {{$timestamp}}\",\n    \"availability\":[{\n        \"dayOfWeek\":\"MONDAY\",\n        \"startTime\":\"11:00\",\n        \"endTime\":\"17:00\"\n    }],\n    \"userId\":\"{{tutor_user_id}}\",\n    \"gradeLevels\":[\"LEVEL_1\"]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/api/v1/organizations/{{edifyqa_org_id}}/tutor-pools/{{tp_id}}/tutor-profiles",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"api",
												"v1",
												"organizations",
												"{{edifyqa_org_id}}",
												"tutor-pools",
												"{{tp_id}}",
												"tutor-profiles"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Tutor Profile NE GL",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Grade level does not exist error message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorMessage).to.eql(\"Any grade level doesn't belong to the grade level's list expected.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"timezone\":\"UTC-05\",\n    \"subjects\":[\"english\"],\n    \"bio\":\"Test bio {{$timestamp}}\",\n    \"availability\":[{\n        \"dayOfWeek\":\"MONDAY\",\n        \"startTime\":\"11:00\",\n        \"endTime\":\"17:00\"\n    }],\n    \"userId\":\"{{tutor_user_id}}\",\n    \"gradeLevels\":[\"level_14\"]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/api/v1/organizations/{{edifyqa_org_id}}/tutor-pools/{{tp_id}}/tutor-profiles",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"api",
												"v1",
												"organizations",
												"{{edifyqa_org_id}}",
												"tutor-pools",
												"{{tp_id}}",
												"tutor-profiles"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Tutor Profile NE SUBJ",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Subject does not exist error message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorMessage).to.eql(\"Any subject doesn't belong to the subject's list expected.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"timezone\":\"UTC-05\",\n    \"subjects\":[\"japanese\"],\n    \"bio\":\"Test bio {{$timestamp}}\",\n    \"availability\":[{\n        \"dayOfWeek\":\"MONDAY\",\n        \"startTime\":\"11:00\",\n        \"endTime\":\"17:00\"\n    }],\n    \"userId\":\"{{tutor_user_id}}\",\n    \"gradeLevels\":[\"level_1\"]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/api/v1/organizations/{{edifyqa_org_id}}/tutor-pools/{{tp_id}}/tutor-profiles",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"api",
												"v1",
												"organizations",
												"{{edifyqa_org_id}}",
												"tutor-pools",
												"{{tp_id}}",
												"tutor-profiles"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Tutor Profile NE ORG ID",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 404\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(\"Organization not found error message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorMessage).to.eql(`The organization ${pm.variables.get(\"ne_id\")} was not found`);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"timezone\":\"UTC-05\",\n    \"subjects\":[\"english\"],\n    \"bio\":\"Test bio {{$timestamp}}\",\n    \"availability\":[{\n        \"dayOfWeek\":\"MONDAY\",\n        \"startTime\":\"11:00\",\n        \"endTime\":\"17:00\"\n    }],\n    \"userId\":\"{{tutor_user_id}}\",\n    \"gradeLevels\":[\"level_1\"]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/api/v1/organizations/{{ne_id}}/tutor-pools/{{tp_id}}/tutor-profiles",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"api",
												"v1",
												"organizations",
												"{{ne_id}}",
												"tutor-pools",
												"{{tp_id}}",
												"tutor-profiles"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Tutor Profile NE TP ID",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 404\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(\"Tutor pool id not found error message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorMessage).to.eql(`The tutor pool id ${pm.variables.get(\"ne_id\")} not was found`);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"timezone\":\"UTC-05\",\n    \"subjects\":[\"english\"],\n    \"bio\":\"Test bio {{$timestamp}}\",\n    \"availability\":[{\n        \"dayOfWeek\":\"MONDAY\",\n        \"startTime\":\"11:00\",\n        \"endTime\":\"17:00\"\n    }],\n    \"userId\":\"{{tutor_user_id}}\",\n    \"gradeLevels\":[\"level_1\"]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/api/v1/organizations/{{edifyqa_org_id}}/tutor-pools/{{ne_id}}/tutor-profiles",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"api",
												"v1",
												"organizations",
												"{{edifyqa_org_id}}",
												"tutor-pools",
												"{{ne_id}}",
												"tutor-profiles"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Tutor Profile NAS TP ID",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Tutor pool does not belong error message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorMessage).to.eql(`The tutor pool id ${pm.environment.get(\"priv_tp_id\")} does not belong to organization id ${pm.environment.get(\"edifyqa_org_id\")}`);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"timezone\":\"UTC-05\",\n    \"subjects\":[\"english\"],\n    \"bio\":\"Test bio {{$timestamp}}\",\n    \"availability\":[{\n        \"dayOfWeek\":\"MONDAY\",\n        \"startTime\":\"11:00\",\n        \"endTime\":\"17:00\"\n    }],\n    \"userId\":\"{{tutor_user_id}}\",\n    \"gradeLevels\":[\"level_1\"]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/api/v1/organizations/{{edifyqa_org_id}}/tutor-pools/{{priv_tp_id}}/tutor-profiles",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"api",
												"v1",
												"organizations",
												"{{edifyqa_org_id}}",
												"tutor-pools",
												"{{priv_tp_id}}",
												"tutor-profiles"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Tutor Profile NAS USER ID",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"User not in organization error message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorMessage).to.eql(\"The user provided does not belong to the organization or has not role tutor.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"timezone\":\"UTC-05\",\n    \"subjects\":[\"ENGLISH\"],\n    \"bio\":\"Test bio {{$timestamp}}\",\n    \"availability\":[{\n        \"dayOfWeek\":\"MONDAY\",\n        \"startTime\":\"11:00\",\n        \"endTime\":\"17:00\"\n    }],\n    \"userId\":\"{{littera_user_id}}\",\n    \"gradeLevels\":[\"LEVEL_1\"]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/api/v1/organizations/{{edifyqa_org_id}}/tutor-pools/{{tp_id}}/tutor-profiles",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"api",
												"v1",
												"organizations",
												"{{edifyqa_org_id}}",
												"tutor-pools",
												"{{tp_id}}",
												"tutor-profiles"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Tutor Profile NTU USER ID",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"User not in organization error message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorMessage).to.eql(\"The user provided does not belong to the organization or has not role tutor.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"timezone\":\"UTC-05\",\n    \"subjects\":[\"english\"],\n    \"bio\":\"Test bio {{$timestamp}}\",\n    \"availability\":[{\n        \"dayOfWeek\":\"MONDAY\",\n        \"startTime\":\"11:00\",\n        \"endTime\":\"17:00\"\n    }],\n    \"userId\":\"{{ntu_user_id}}\",\n    \"gradeLevels\":[\"level_1\"]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/api/v1/organizations/{{edifyqa_org_id}}/tutor-pools/{{tp_id}}/tutor-profiles",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"api",
												"v1",
												"organizations",
												"{{edifyqa_org_id}}",
												"tutor-pools",
												"{{tp_id}}",
												"tutor-profiles"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Tutor Profile NO AUTH",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"timezone\":\"UTC-05\",\n    \"subjects\":[\"english\"],\n    \"bio\":\"Test bio {{$timestamp}}\",\n    \"availability\":[{\n        \"dayOfWeek\":\"MONDAY\",\n        \"startTime\":\"11:00\",\n        \"endTime\":\"17:00\"\n    }],\n    \"userId\":\"{{user_id}}\",\n    \"gradeLevels\":[\"level_1\"]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/api/v1/organizations/{{edifyqa_org_id}}/tutor-pools/{{tp_id}}/tutor-profiles",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"api",
												"v1",
												"organizations",
												"{{edifyqa_org_id}}",
												"tutor-pools",
												"{{tp_id}}",
												"tutor-profiles"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Get Tutor Profiles",
							"item": [
								{
									"name": "Get Tutor Profiles",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{base_url}}/api/v1/organizations/{{edifyqa_org_id}}/tutor-pools/{{tp_id}}/tutor-profiles",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"api",
												"v1",
												"organizations",
												"{{edifyqa_org_id}}",
												"tutor-pools",
												"{{tp_id}}",
												"tutor-profiles"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get Tutor Profiles PAGINATION",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response body data length is equal to 1\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.data.length).to.eql(1);",
													"});",
													"",
													"pm.test(\"Response body meta page is equal to 2\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.meta.page).to.eql(2);",
													"});",
													"",
													"pm.test(\"Response body meta size is equal to 1\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.meta.size).to.eql(1);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{base_url}}/api/v1/organizations/{{edifyqa_org_id}}/tutor-pools/{{tp_id}}/tutor-profiles?page=2&size=1",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"api",
												"v1",
												"organizations",
												"{{edifyqa_org_id}}",
												"tutor-pools",
												"{{tp_id}}",
												"tutor-profiles"
											],
											"query": [
												{
													"key": "page",
													"value": "2"
												},
												{
													"key": "size",
													"value": "1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get Tutor Profiles NE ORG ID",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 404\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(\"Organization not found error message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorMessage).to.eql(`The organization ${pm.variables.get(\"ne_id\")} was not found`);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{base_url}}/api/v1/organizations/{{ne_id}}/tutor-pools/{{tp_id}}/tutor-profiles",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"api",
												"v1",
												"organizations",
												"{{ne_id}}",
												"tutor-pools",
												"{{tp_id}}",
												"tutor-profiles"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get Tutor Profiles NE TP ID",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 404\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(\"Tutor pool id not found error message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorMessage).to.eql(`The tutor pool id ${pm.variables.get(\"ne_id\")} not was found`);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{base_url}}/api/v1/organizations/{{edifyqa_org_id}}/tutor-pools/{{ne_id}}/tutor-profiles",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"api",
												"v1",
												"organizations",
												"{{edifyqa_org_id}}",
												"tutor-pools",
												"{{ne_id}}",
												"tutor-profiles"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get Tutor Profiles NAS TP ID",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Tutor pool does not belong error message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorMessage).to.eql(`The tutor pool id ${pm.environment.get(\"priv_tp_id\")} does not belong to organization id ${pm.environment.get(\"edifyqa_org_id\")}`);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{base_url}}/api/v1/organizations/{{edifyqa_org_id}}/tutor-pools/{{priv_tp_id}}/tutor-profiles",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"api",
												"v1",
												"organizations",
												"{{edifyqa_org_id}}",
												"tutor-pools",
												"{{priv_tp_id}}",
												"tutor-profiles"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get Tutor Profiles NO AUTH",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{base_url}}/api/v1/organizations/{{edifyqa_org_id}}/tutor-pools/{{tp_id}}/tutor-profiles",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"api",
												"v1",
												"organizations",
												"{{edifyqa_org_id}}",
												"tutor-pools",
												"{{tp_id}}",
												"tutor-profiles"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Update Tutor Profile",
							"item": [
								{
									"name": "Update Tutor Profile",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"timezone\":\"UTC-05\",\n    \"bio\":\"Test Tutor Bio {{$timestamp}}\",\n    \"availability\":[\n        {\n            \"dayOfWeek\":\"MONDAY\",\n            \"startTime\":\"11:00\",\n            \"endTime\":\"17:00\"\n        }\n    ]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/api/v1/organizations/{{edifyqa_org_id}}/tutor-pools/{{tp_id}}/tutor-profiles/{{edifyqa_tutorprof_id}}",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"api",
												"v1",
												"organizations",
												"{{edifyqa_org_id}}",
												"tutor-pools",
												"{{tp_id}}",
												"tutor-profiles",
												"{{edifyqa_tutorprof_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update Tutor Profile TZ ONLY",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"timezone\":\"UTC-05\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/api/v1/organizations/{{edifyqa_org_id}}/tutor-pools/{{tp_id}}/tutor-profiles/{{edifyqa_tutorprof_id}}",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"api",
												"v1",
												"organizations",
												"{{edifyqa_org_id}}",
												"tutor-pools",
												"{{tp_id}}",
												"tutor-profiles",
												"{{edifyqa_tutorprof_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update Tutor Profile NO TZ",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 404\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(\"Timezone not null error message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorMessage).to.eql(\"The timezone field should not be null\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/api/v1/organizations/{{edifyqa_org_id}}/tutor-pools/{{tp_id}}/tutor-profiles/{{edifyqa_tutorprof_id}}",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"api",
												"v1",
												"organizations",
												"{{edifyqa_org_id}}",
												"tutor-pools",
												"{{tp_id}}",
												"tutor-profiles",
												"{{edifyqa_tutorprof_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update Tutor Profile NE ORG ID",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 404\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(\"Organizaton not found error message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorMessage).to.eql(`The organization ${pm.environment.get(\"ne_id\")} was not found`);",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"timezone\":\"UTC-05\",\n    \"bio\":\"Test Tutor Bio {{$timestamp}}\",\n    \"availability\":[\n        {\n            \"dayOfWeek\":\"MONDAY\",\n            \"startTime\":\"11:00\",\n            \"endTime\":\"17:00\"\n        }\n    ]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/api/v1/organizations/{{ne_id}}/tutor-pools/{{tp_id}}/tutor-profiles/{{edifyqa_tutorprof_id}}",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"api",
												"v1",
												"organizations",
												"{{ne_id}}",
												"tutor-pools",
												"{{tp_id}}",
												"tutor-profiles",
												"{{edifyqa_tutorprof_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update Tutor Profile NE TP ID",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 404\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(\"Tutor pool not found error message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorMessage).to.eql(`The tutor pool id ${pm.environment.get(\"ne_id\")} not was found`);",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"timezone\":\"UTC-05\",\n    \"bio\":\"Test Tutor Bio {{$timestamp}}\",\n    \"availability\":[\n        {\n            \"dayOfWeek\":\"MONDAY\",\n            \"startTime\":\"11:00\",\n            \"endTime\":\"17:00\"\n        }\n    ]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/api/v1/organizations/{{edifyqa_org_id}}/tutor-pools/{{ne_id}}/tutor-profiles/{{edifyqa_tutorprof_id}}",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"api",
												"v1",
												"organizations",
												"{{edifyqa_org_id}}",
												"tutor-pools",
												"{{ne_id}}",
												"tutor-profiles",
												"{{edifyqa_tutorprof_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update Tutor Profile NAS TP ID",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Tutor pool does not belong error message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorMessage).to.eql(`The tutor pool id ${pm.environment.get(\"pub_tp_id\")} does not belong to organization id ${pm.environment.get(\"edifyqa_org_id\")}`);",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"timezone\":\"UTC-05\",\n    \"bio\":\"Test Tutor Bio {{$timestamp}}\",\n    \"availability\":[\n        {\n            \"dayOfWeek\":\"MONDAY\",\n            \"startTime\":\"11:00\",\n            \"endTime\":\"17:00\"\n        }\n    ]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/api/v1/organizations/{{edifyqa_org_id}}/tutor-pools/{{pub_tp_id}}/tutor-profiles/{{edifyqa_tutorprof_id}}",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"api",
												"v1",
												"organizations",
												"{{edifyqa_org_id}}",
												"tutor-pools",
												"{{pub_tp_id}}",
												"tutor-profiles",
												"{{edifyqa_tutorprof_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update Tutor Profile NAS TPROF ID",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Tutor profile does not belong error message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorMessage).to.eql(`The tutor profile id ${pm.environment.get(\"littera_tutorprof_id\")} does not belong to organization id ${pm.environment.get(\"edifyqa_org_id\")}`);",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"timezone\":\"UTC-05\",\n    \"bio\":\"Test Tutor Bio {{$timestamp}}\",\n    \"availability\":[\n        {\n            \"dayOfWeek\":\"MONDAY\",\n            \"startTime\":\"11:00\",\n            \"endTime\":\"17:00\"\n        }\n    ]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/api/v1/organizations/{{edifyqa_org_id}}/tutor-pools/{{tp_id}}/tutor-profiles/{{littera_tutorprof_id}}",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"api",
												"v1",
												"organizations",
												"{{edifyqa_org_id}}",
												"tutor-pools",
												"{{tp_id}}",
												"tutor-profiles",
												"{{littera_tutorprof_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update Tutor Profile NO AUTH",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"timezone\":\"UTC-05\",\n    \"bio\":\"Test Tutor Bio {{$timestamp}}\",\n    \"availability\":[\n        {\n            \"dayOfWeek\":\"MONDAY\",\n            \"startTime\":\"11:00\",\n            \"endTime\":\"17:00\"\n        }\n    ]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/api/v1/organizations/{{edifyqa_org_id}}/tutor-pools/{{tp_id}}/tutor-profiles/{{edifyqa_tutorprof_id}}",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"api",
												"v1",
												"organizations",
												"{{edifyqa_org_id}}",
												"tutor-pools",
												"{{tp_id}}",
												"tutor-profiles",
												"{{edifyqa_tutorprof_id}}"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "Course enrollment REST Service",
					"item": [
						{
							"name": "Get Course Enrollments",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/api/v1/organizations/{{edifyqa_org_id}}/course-enrollments",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"v1",
										"organizations",
										"{{edifyqa_org_id}}",
										"course-enrollments"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Course Enrollments PAGINATION",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response body data length is equal to 1\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.length).to.eql(1);",
											"});",
											"",
											"pm.test(\"Response body meta page is equal to 2\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.meta.page).to.eql(2);",
											"});",
											"",
											"pm.test(\"Response body meta size is equal to 1\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.meta.size).to.eql(1);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/api/v1/organizations/{{edifyqa_org_id}}/course-enrollments?page=2&size=1",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"v1",
										"organizations",
										"{{edifyqa_org_id}}",
										"course-enrollments"
									],
									"query": [
										{
											"key": "page",
											"value": "2"
										},
										{
											"key": "size",
											"value": "1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Course Enrollment NO AUTH",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 403\", function () {",
											"    pm.response.to.have.status(403);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/api/v1/organizations/{{edifyqa_org_id}}/course-enrollments",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"v1",
										"organizations",
										"{{edifyqa_org_id}}",
										"course-enrollments"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Course REST Service",
					"item": [
						{
							"name": "Get Courses",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/api/v1/organizations/{{edifyqa_org_id}}/courses",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"v1",
										"organizations",
										"{{edifyqa_org_id}}",
										"courses"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Courses PAGINATION",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response body data length is equal to 1\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.length).to.eql(1);",
											"});",
											"",
											"pm.test(\"Response body meta page is equal to 0\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.meta.page).to.eql(0);",
											"});",
											"",
											"pm.test(\"Response body meta size is equal to 1\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.meta.size).to.eql(1);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/api/v1/organizations/{{edifyqa_org_id}}/courses?page=0&size=1",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"v1",
										"organizations",
										"{{edifyqa_org_id}}",
										"courses"
									],
									"query": [
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "size",
											"value": "1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Course NO AUTH",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 403\", function () {",
											"    pm.response.to.have.status(403);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/api/v1/organizations/{{edifyqa_org_id}}/courses",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"v1",
										"organizations",
										"{{edifyqa_org_id}}",
										"courses"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "LMS Integrations REST Service",
					"item": [
						{
							"name": "Get LMS Integrations By Organization",
							"item": [
								{
									"name": "Get LMS Integr By Org",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{base_url}}/api/v1/organizations/{{edifyqa_org_id}}/lms-integrations",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"api",
												"v1",
												"organizations",
												"{{edifyqa_org_id}}",
												"lms-integrations"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get LMS Integr By Org PAGINATION",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response body data length is equal to 1\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.data.length).to.eql(1);",
													"});",
													"",
													"pm.test(\"Response body meta page is equal to 2\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.meta.page).to.eql(2);",
													"});",
													"",
													"pm.test(\"Response body meta size is equal to 1\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.meta.size).to.eql(1);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{base_url}}/api/v1/organizations/{{edifyqa_org_id}}/lms-integrations?page=2&size=1",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"api",
												"v1",
												"organizations",
												"{{edifyqa_org_id}}",
												"lms-integrations"
											],
											"query": [
												{
													"key": "page",
													"value": "2"
												},
												{
													"key": "size",
													"value": "1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get LMS Integr By Org NE ORG ID",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 404\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(\"Organization not found error message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorMessage).to.eql(`The organization ${pm.variables.get(\"ne_id\")} not found`);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{base_url}}/api/v1/organizations/{{ne_id}}/lms-integrations",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"api",
												"v1",
												"organizations",
												"{{ne_id}}",
												"lms-integrations"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get LMS Integr By Org NO AUTH",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{base_url}}/api/v1/organizations/{{edifyqa_org_id}}/lms-integrations",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"api",
												"v1",
												"organizations",
												"{{edifyqa_org_id}}",
												"lms-integrations"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Create LMS Integrations",
							"item": [
								{
									"name": "Create LMS Integrations",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"name\": \"Test Name {{$timestamp}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/api/v1/organizations/{{edifyqa_org_id}}/lms-integrations",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"api",
												"v1",
												"organizations",
												"{{edifyqa_org_id}}",
												"lms-integrations"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create LMS Integrations NO AUTH",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"name\": \"Test Name {{$timestamp}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/api/v1/organizations/{{edifyqa_org_id}}/lms-integrations",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"api",
												"v1",
												"organizations",
												"{{edifyqa_org_id}}",
												"lms-integrations"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "Programs REST Service",
					"item": [
						{
							"name": "Create Programs",
							"item": [
								{
									"name": "Create Programs",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{base_url}}/api/v1/organizations/{{edifyqa_org_id}}/programs",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"api",
												"v1",
												"organizations",
												"{{edifyqa_org_id}}",
												"programs"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Programs NE ORG ID",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 404\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(\"Organization not found error message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorMessage).to.eql(`The organization ${pm.variables.get(\"ne_id\")} not found`);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{base_url}}/api/v1/organizations/{{ne_id}}/programs",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"api",
												"v1",
												"organizations",
												"{{ne_id}}",
												"programs"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Programs NO AUTH",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{base_url}}/api/v1/organizations/{{edifyqa_org_id}}/programs",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"api",
												"v1",
												"organizations",
												"{{edifyqa_org_id}}",
												"programs"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Update Programs",
							"item": [
								{
									"name": "Update Programs",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{  \n  \"name\": \"Test program {{$timestamp}}\",\n  \"subjects\": [{\n        \"subjectCode\": \"MATH\"\n      },\n      {\n        \"subjectCode\": \"BUSINESS\"\n      }],\n  \"type\": \"PRESET\",\n  \"settings\": {\n      \"wizardStep\": 1,\n      \"programStartDate\": \"2021-04-02\",\n      \"programEndDate\": \"2021-12-11\",\n      \"tutorStudentRatio\": \"TUTOR_STUDENT_1\",\n      \"isRecurring\": true,\n      \"recurringSessionsCount\": 2,\n      \"sessionLength\": 30,\n      \"tutorPools\": [\n          {\n            \"id\": \"1111111\",\n            \"name\": \"District Tutors 1\"\n          }\n       ],\n       \"assignmentType\": \"COORDINATOR\",\n       \"timeSlots\": [\n          {\n            \"type\": \"WEEKDAY\",\n            \"weekDay\": \"MONDAY\",\n            \"startTime\": \"13:00\",\n            \"endTime\": \"13:30\"\n          },\n          {\n            \"type\": \"WEEKDAY\",\n            \"weekDay\": \"TUESDAY\",\n            \"startTime\": \"13:00\",\n            \"endTime\": \"13:30\"\n          }\n       ]  \n  }   \n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/api/v1/organizations/{{edifyqa_org_id}}/programs/{{edifyqa_program_id}}",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"api",
												"v1",
												"organizations",
												"{{edifyqa_org_id}}",
												"programs",
												"{{edifyqa_program_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update Programs NAME ONLY",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\":\"Updated Program {{$timestamp}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/api/v1/organizations/{{edifyqa_org_id}}/programs/{{edifyqa_program_id}}",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"api",
												"v1",
												"organizations",
												"{{edifyqa_org_id}}",
												"programs",
												"{{edifyqa_program_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update Programs SETTINGS ONLY",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"settings\": {\n      \"wizardStep\": 1,\n      \"programStartDate\": \"2021-04-02\",\n      \"programEndDate\": \"2021-12-11\",\n      \"tutorStudentRatio\": \"TUTOR_STUDENT_1\",\n      \"isRecurring\": true,\n      \"recurringSessionsCount\": 2,\n      \"sessionLength\": 30,\n      \"tutorPools\": [\n          {\n            \"id\": \"1111111\",\n            \"name\": \"District Tutors 1\"\n          }\n       ],\n       \"assignmentType\": \"COORDINATOR\",\n       \"timeSlots\": [\n          {\n            \"type\": \"WEEKDAY\",\n            \"weekDay\": \"MONDAY\",\n            \"startTime\": \"13:00\",\n            \"endTime\": \"13:30\"\n          },\n          {\n            \"type\": \"WEEKDAY\",\n            \"weekDay\": \"TUESDAY\",\n            \"startTime\": \"13:00\",\n            \"endTime\": \"13:30\"\n          }\n       ]  \n  }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/api/v1/organizations/{{edifyqa_org_id}}/programs/{{edifyqa_program_id}}",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"api",
												"v1",
												"organizations",
												"{{edifyqa_org_id}}",
												"programs",
												"{{edifyqa_program_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update Programs TYPE ONLY",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"type\" : \"FLEXIBLE\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/api/v1/organizations/{{edifyqa_org_id}}/programs/{{edifyqa_program_id}}",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"api",
												"v1",
												"organizations",
												"{{edifyqa_org_id}}",
												"programs",
												"{{edifyqa_program_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update Programs SUBJ ONLY",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"subjects\": [\n        {\n            \"subjectCode\": \"ENGLISH\"\n        },\n        {\n            \"subjectCode\": \"BUSINESS\"\n        }\n    ]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/api/v1/organizations/{{edifyqa_org_id}}/programs/{{edifyqa_program_id}}",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"api",
												"v1",
												"organizations",
												"{{edifyqa_org_id}}",
												"programs",
												"{{edifyqa_program_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update Programs NO FIELDS",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/api/v1/organizations/{{edifyqa_org_id}}/programs/{{edifyqa_program_id}}",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"api",
												"v1",
												"organizations",
												"{{edifyqa_org_id}}",
												"programs",
												"{{edifyqa_program_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update Programs NE ORG ID",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 404\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(\"Organization not found error message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorMessage).to.eql(`The organization ${pm.variables.get(\"ne_id\")} not found`);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\":\"Updated Program {{$timestamp}}\",\n    \"subjects\": [\n        {\n            \"subjectCode\": \"ENGLISH\"\n        },\n        {\n            \"subjectCode\": \"BUSINESS\"\n        }\n    ]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/api/v1/organizations/{{ne_id}}/programs/{{edifyqa_program_id}}",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"api",
												"v1",
												"organizations",
												"{{ne_id}}",
												"programs",
												"{{edifyqa_program_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update Programs NE PROG ID",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 404\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(\"Program not found error message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorMessage).to.eql(`The program id ${pm.variables.get(\"ne_id\")} not found`);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\":\"Updated Program {{$timestamp}}\",\n    \"subjects\": [\n        {\n            \"subjectCode\": \"ENGLISH\"\n        },\n        {\n            \"subjectCode\": \"BUSINESS\"\n        }\n    ]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/api/v1/organizations/{{edifyqa_org_id}}/programs/{{ne_id}}",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"api",
												"v1",
												"organizations",
												"{{edifyqa_org_id}}",
												"programs",
												"{{ne_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update Programs NAS PROG ID",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 404\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(\"Program not found error message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorMessage).to.eql(`The program id ${pm.variables.get(\"littera_program_id\")} not found`);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\":\"Updated Program {{$timestamp}}\",\n    \"subjects\": [\n        {\n            \"subjectCode\": \"ENGLISH\"\n        },\n        {\n            \"subjectCode\": \"BUSINESS\"\n        }\n    ]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/api/v1/organizations/{{edifyqa_org_id}}/programs/{{littera_program_id}}",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"api",
												"v1",
												"organizations",
												"{{edifyqa_org_id}}",
												"programs",
												"{{littera_program_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update Programs NE SUBJ",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Incorrect subject error message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorMessage).to.eql(\"Any subject doesn't belong to the subject's list expected.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\":\"Updated Program {{$timestamp}}\",\n    \"subjects\": [\n        {\n            \"subjectCode\": \"ENGLICH\"\n        },\n        {\n            \"subjectCode\": \"BISNES\"\n        }\n    ]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/api/v1/organizations/{{edifyqa_org_id}}/programs/{{edifyqa_program_id}}",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"api",
												"v1",
												"organizations",
												"{{edifyqa_org_id}}",
												"programs",
												"{{edifyqa_program_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update Programs NO AUTH",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\":\"Updated Program {{$timestamp}}\",\n    \"subjects\": [\n        {\n            \"subjectCode\": \"ENGLISH\"\n        },\n        {\n            \"subjectCode\": \"BUSINESS\"\n        }\n    ]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/api/v1/organizations/{{edifyqa_org_id}}/programs/{{edifyqa_program_id}}",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"api",
												"v1",
												"organizations",
												"{{edifyqa_org_id}}",
												"programs",
												"{{edifyqa_program_id}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Perform match Students by Program",
							"item": [
								{
									"name": "Match Student",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Enrolled count greater than 0\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.enrolledCount).to.greaterThan(0);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n \"students\": [\n      {\n        \"email\": \"donald.wilson@example.com\",\n        \"firstName\": \"Donald\",\n        \"lastName\": \"Wilson\",\n        \"course\": \"English\"\n      }\n ]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/api/v1/organizations/{{edifyqa_org_id}}/programs/{{edifyqa_program_id}}/students",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"api",
												"v1",
												"organizations",
												"{{edifyqa_org_id}}",
												"programs",
												"{{edifyqa_program_id}}",
												"students"
											]
										}
									},
									"response": []
								},
								{
									"name": "Match Student UNMATCHED",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response body unmatched length greater than 0\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.unmatched.length).to.greaterThan(0);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n \"students\": [\n      {\n        \"email\": \"donald.wilson@example.com\",\n        \"firstName\": \"Donald\",\n        \"lastName\": \"Wilson\",\n        \"course\": \"Business\"\n      }\n ]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/api/v1/organizations/{{edifyqa_org_id}}/programs/{{edifyqa_program_id}}/students",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"api",
												"v1",
												"organizations",
												"{{edifyqa_org_id}}",
												"programs",
												"{{edifyqa_program_id}}",
												"students"
											]
										}
									},
									"response": []
								},
								{
									"name": "Match Student NE ORG ID",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 404\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(\"Organizaton not found error message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorMessage).to.eql(`The organization ${pm.environment.get(\"ne_id\")} not found`);",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n \"students\": [\n      {\n        \"email\": \"donald.wilson@example.com\",\n        \"firstName\": \"Donald\",\n        \"lastName\": \"Wilson\",\n        \"course\": \"English\"\n      }\n ]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/api/v1/organizations/{{ne_id}}/programs/{{edifyqa_program_id}}/students",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"api",
												"v1",
												"organizations",
												"{{ne_id}}",
												"programs",
												"{{edifyqa_program_id}}",
												"students"
											]
										}
									},
									"response": []
								},
								{
									"name": "Match Student NAS PROG ID",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 404\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(\"Program id not found error message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorMessage).to.eql(`The program id ${pm.environment.get(\"littera_program_id\")} not found into the organization ${pm.environment.get(\"edifyqa_org_id\")}`);",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n \"students\": [\n      {\n        \"email\": \"donald.wilson@example.com\",\n        \"firstName\": \"Donald\",\n        \"lastName\": \"Wilson\",\n        \"course\": \"English\"\n      }\n ]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/api/v1/organizations/{{edifyqa_org_id}}/programs/{{littera_program_id}}/students",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"api",
												"v1",
												"organizations",
												"{{edifyqa_org_id}}",
												"programs",
												"{{littera_program_id}}",
												"students"
											]
										}
									},
									"response": []
								},
								{
									"name": "Match Student NO AUTH",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n \"students\": [\n      {\n        \"email\": \"donald.wilson@example.com\",\n        \"firstName\": \"Donald\",\n        \"lastName\": \"Wilson\",\n        \"course\": \"English\"\n      }\n ]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/api/v1/organizations/{{edifyqa_org_id}}/programs/{{edifyqa_program_id}}/students",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"api",
												"v1",
												"organizations",
												"{{edifyqa_org_id}}",
												"programs",
												"{{edifyqa_program_id}}",
												"students"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Get All Programs",
							"item": [
								{
									"name": "Get all programs",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{base_url}}/api/v1/organizations/{{edifyqa_org_id}}/programs",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"api",
												"v1",
												"organizations",
												"{{edifyqa_org_id}}",
												"programs"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get all programs PAGINATION",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response body data length is equal to 1\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.data.length).to.eql(1);",
													"});",
													"",
													"pm.test(\"Response body meta page is equal to 2\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.meta.page).to.eql(2);",
													"});",
													"",
													"pm.test(\"Response body meta size is equal to 1\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.meta.size).to.eql(1);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{base_url}}/api/v1/organizations/{{edifyqa_org_id}}/programs?page=2&size=1",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"api",
												"v1",
												"organizations",
												"{{edifyqa_org_id}}",
												"programs"
											],
											"query": [
												{
													"key": "page",
													"value": "2"
												},
												{
													"key": "size",
													"value": "1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get all programs STATUS",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{base_url}}/api/v1/organizations/{{edifyqa_org_id}}/programs?status=DRAFT",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"api",
												"v1",
												"organizations",
												"{{edifyqa_org_id}}",
												"programs"
											],
											"query": [
												{
													"key": "status",
													"value": "DRAFT"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get all programs NE STATUS",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Invalid status error message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorMessage).to.eql(\"Invalid program status: WAITING\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{base_url}}/api/v1/organizations/{{edifyqa_org_id}}/programs?status=WAITING",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"api",
												"v1",
												"organizations",
												"{{edifyqa_org_id}}",
												"programs"
											],
											"query": [
												{
													"key": "status",
													"value": "WAITING"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get all programs NE ORG ID",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 404\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(\"Organizaton not found error message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorMessage).to.eql(`Organization ${pm.environment.get(\"ne_id\")} not found`);",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{base_url}}/api/v1/organizations/{{ne_id}}/programs",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"api",
												"v1",
												"organizations",
												"{{ne_id}}",
												"programs"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get all programs NO AUTH",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{base_url}}/api/v1/organizations/{{edifyqa_org_id}}/programs",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"api",
												"v1",
												"organizations",
												"{{edifyqa_org_id}}",
												"programs"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Get Program by Id",
							"item": [
								{
									"name": "Get Program by ID",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{base_url}}/api/v1/organizations/{{edifyqa_org_id}}/programs/{{edifyqa_program_id}}",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"api",
												"v1",
												"organizations",
												"{{edifyqa_org_id}}",
												"programs",
												"{{edifyqa_program_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get Program by ID NE ORG ID",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 404\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(\"Organization not found error message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorMessage).to.eql(`Organization ${pm.environment.get(\"ne_id\")} not found`);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{base_url}}/api/v1/organizations/{{ne_id}}/programs/{{edifyqa_program_id}}",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"api",
												"v1",
												"organizations",
												"{{ne_id}}",
												"programs",
												"{{edifyqa_program_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get Program by ID NAS PROG ID",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 404\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(\"Program not found in organization error message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorMessage).to.eql(`The program id ${pm.environment.get(\"littera_program_id\")} not found into the organization ${pm.environment.get(\"edifyqa_org_id\")}`);",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{base_url}}/api/v1/organizations/{{edifyqa_org_id}}/programs/{{littera_program_id}}",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"api",
												"v1",
												"organizations",
												"{{edifyqa_org_id}}",
												"programs",
												"{{littera_program_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get Program by ID NO AUTH",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{base_url}}/api/v1/organizations/{{edifyqa_org_id}}/programs/{{edifyqa_program_id}}",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"api",
												"v1",
												"organizations",
												"{{edifyqa_org_id}}",
												"programs",
												"{{edifyqa_program_id}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Get Program Enrollments",
							"item": [
								{
									"name": "Get Program Enrollments",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{base_url}}/api/v1/organizations/{{edifyqa_org_id}}/programs/{{edifyqa_program_id}}/enrollments",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"api",
												"v1",
												"organizations",
												"{{edifyqa_org_id}}",
												"programs",
												"{{edifyqa_program_id}}",
												"enrollments"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get Program Enrollments NE ORG ID",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 404\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(\"Organization not found error message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorMessage).to.eql(`Organization ${pm.environment.get(\"ne_id\")} not found`);",
													"});",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{base_url}}/api/v1/organizations/{{ne_id}}/programs/{{edifyqa_program_id}}/enrollments",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"api",
												"v1",
												"organizations",
												"{{ne_id}}",
												"programs",
												"{{edifyqa_program_id}}",
												"enrollments"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get Program Enrollments NAS PROG ID",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 404\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(\"Program does not belong error message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorMessage).to.eql(`The program id ${pm.environment.get(\"littera_program_id\")} does not belong to organization ${pm.environment.get(\"edifyqa_org_id\")}`);",
													"});",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{base_url}}/api/v1/organizations/{{edifyqa_org_id}}/programs/{{littera_program_id}}/enrollments",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"api",
												"v1",
												"organizations",
												"{{edifyqa_org_id}}",
												"programs",
												"{{littera_program_id}}",
												"enrollments"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get Program Enrollments NO AUTH",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{base_url}}/api/v1/organizations/{{edifyqa_org_id}}/programs/{{edifyqa_program_id}}/enrollments",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"api",
												"v1",
												"organizations",
												"{{edifyqa_org_id}}",
												"programs",
												"{{edifyqa_program_id}}",
												"enrollments"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Get tutor profiles by program id",
							"item": [
								{
									"name": "Get TP by Prog ID",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{base_url}}/api/v1/organizations/{{edifyqa_org_id}}/programs/{{edifyqa_program2_id}}/tutor-profiles",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"api",
												"v1",
												"organizations",
												"{{edifyqa_org_id}}",
												"programs",
												"{{edifyqa_program2_id}}",
												"tutor-profiles"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get TP by Prog ID NE ORG ID",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 404\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(\"Organization not found error message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorMessage).to.eql(`The organization ${pm.environment.get(\"ne_id\")} was not found`);",
													"});",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{base_url}}/api/v1/organizations/{{ne_id}}/programs/{{edifyqa_program2_id}}/tutor-profiles",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"api",
												"v1",
												"organizations",
												"{{ne_id}}",
												"programs",
												"{{edifyqa_program2_id}}",
												"tutor-profiles"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get TP by Prog ID NAS PROG ID",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 404\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(\"Program does not belong error message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorMessage).to.eql(`The program id ${pm.environment.get(\"littera_program_id\")} does not belong to organization ${pm.environment.get(\"edifyqa_org_id\")}`);",
													"});",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{base_url}}/api/v1/organizations/{{edifyqa_org_id}}/programs/{{littera_program_id}}/tutor-profiles",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"api",
												"v1",
												"organizations",
												"{{edifyqa_org_id}}",
												"programs",
												"{{littera_program_id}}",
												"tutor-profiles"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get TP by Prog ID NO AUTH",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{base_url}}/api/v1/organizations/{{edifyqa_org_id}}/programs/{{edifyqa_program_id}}/tutor-profiles",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"api",
												"v1",
												"organizations",
												"{{edifyqa_org_id}}",
												"programs",
												"{{edifyqa_program_id}}",
												"tutor-profiles"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "Session REST Service",
					"item": [
						{
							"name": "Create Session for Program",
							"item": [
								{
									"name": "Create Session for Program",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n \"isAutoMatch\" : false,\n \"tutorProfileIds\" : [\"1c220034-015e-456b-9a80-9a4027d7776f\"],\n \"programEnrollmentIds\" : [\"ccf4a360-6d98-46d5-b445-3edc2eb92eeb\"],\n \"description\": \"Test description {{$timestamp}}\",\n \"title\": \"Test Title {{$timestamp}}\",\n \"sessionDates\": [\n    {\n      \"startDate\" : \"2021-05-03\",\n      \"startTime\" : \"10:15:30\"\n    },\n        {\n      \"startDate\" : \"2021-12-04\",\n      \"startTime\" : \"10:15:30\"\n    }\n ]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/api/v1/organizations/{{edifyqa_org_id}}/programs/{{edifyqa_program2_id}}/sessions",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"api",
												"v1",
												"organizations",
												"{{edifyqa_org_id}}",
												"programs",
												"{{edifyqa_program2_id}}",
												"sessions"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Session for Program NE ORG ID",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 404\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(\"Organization not found error message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorMessage).to.eql(`The organization ${pm.environment.get(\"ne_id\")} not found`);",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n \"isAutoMatch\" : false,\n \"tutorProfileIds\" : [\"1c220034-015e-456b-9a80-9a4027d7776f\"],\n \"programEnrollmentIds\" : [\"ccf4a360-6d98-46d5-b445-3edc2eb92eeb\"],\n \"description\": \"Test description {{$timestamp}}\",\n \"title\": \"Test Title {{$timestamp}}\",\n \"sessionDates\": [\n    {\n      \"startDate\" : \"2021-05-03\",\n      \"startTime\" : \"10:15:30\"\n    },\n        {\n      \"startDate\" : \"2021-12-04\",\n      \"startTime\" : \"10:15:30\"\n    }\n ]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/api/v1/organizations/{{ne_id}}/programs/{{edifyqa_program2_id}}/sessions",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"api",
												"v1",
												"organizations",
												"{{ne_id}}",
												"programs",
												"{{edifyqa_program2_id}}",
												"sessions"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Session for Program NAS PROG ID",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 404\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(\"Program id not found error message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorMessage).to.eql(`The program id ${pm.environment.get(\"littera_program_id\")} not found`);",
													"});",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n \"isAutoMatch\" : false,\n \"tutorProfileIds\" : [\"1c220034-015e-456b-9a80-9a4027d7776f\"],\n \"programEnrollmentIds\" : [\"ccf4a360-6d98-46d5-b445-3edc2eb92eeb\"],\n \"description\": \"Test description {{$timestamp}}\",\n \"title\": \"Test Title {{$timestamp}}\",\n \"sessionDates\": [\n    {\n      \"startDate\" : \"2021-05-03\",\n      \"startTime\" : \"10:15:30\"\n    },\n        {\n      \"startDate\" : \"2021-12-04\",\n      \"startTime\" : \"10:15:30\"\n    }\n ]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/api/v1/organizations/{{edifyqa_org_id}}/programs/{{littera_program_id}}/sessions",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"api",
												"v1",
												"organizations",
												"{{edifyqa_org_id}}",
												"programs",
												"{{littera_program_id}}",
												"sessions"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Session for Program NAS PROG ENROLL ID",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Program enrollment does not belong error message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorMessage).to.eql(\"There is a program enrollment that doesn't belong to the organization and program\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n \"isAutoMatch\" : false,\n \"tutorProfileIds\" : [\"1c220034-015e-456b-9a80-9a4027d7776f\"],\n \"programEnrollmentIds\" : [\"904d4944-affc-4e85-996d-df29b922c825\"],\n \"description\": \"Test description {{$timestamp}}\",\n \"title\": \"Test Title {{$timestamp}}\",\n \"sessionDates\": [\n    {\n      \"startDate\" : \"2021-05-03\",\n      \"startTime\" : \"10:15:30\"\n    },\n        {\n      \"startDate\" : \"2021-12-04\",\n      \"startTime\" : \"10:15:30\"\n    }\n ]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/api/v1/organizations/{{edifyqa_org_id}}/programs/{{edifyqa_program2_id}}/sessions",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"api",
												"v1",
												"organizations",
												"{{edifyqa_org_id}}",
												"programs",
												"{{edifyqa_program2_id}}",
												"sessions"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Session for Program NO AUTH",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n \"isAutoMatch\" : false,\n \"tutorProfileIds\" : [\"1c220034-015e-456b-9a80-9a4027d7776f\"],\n \"programEnrollmentIds\" : [\"ccf4a360-6d98-46d5-b445-3edc2eb92eeb\"],\n \"description\": \"Test description {{$timestamp}}\",\n \"title\": \"Test Title {{$timestamp}}\",\n \"sessionDates\": [\n    {\n      \"startDate\" : \"2021-05-03\",\n      \"startTime\" : \"10:15:30\"\n    },\n        {\n      \"startDate\" : \"2021-12-04\",\n      \"startTime\" : \"10:15:30\"\n    }\n ]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/api/v1/organizations/{{edifyqa_org_id}}/programs/{{edifyqa_program2_id}}/sessions",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"api",
												"v1",
												"organizations",
												"{{edifyqa_org_id}}",
												"programs",
												"{{edifyqa_program2_id}}",
												"sessions"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Get sessions based on program",
							"item": [
								{
									"name": "Get sessions on program",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{base_url}}/api/v1/organizations/{{edifyqa_org_id}}/programs/{{edifyqa_program4_id}}/sessions",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"api",
												"v1",
												"organizations",
												"{{edifyqa_org_id}}",
												"programs",
												"{{edifyqa_program4_id}}",
												"sessions"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get sessions on program NE ORG ID",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 404\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(\"Organization not found error message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorMessage).to.eql(`Organization ${pm.environment.get(\"ne_id\")} not found`);",
													"});",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{base_url}}/api/v1/organizations/{{ne_id}}/programs/{{edifyqa_program4_id}}/sessions",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"api",
												"v1",
												"organizations",
												"{{ne_id}}",
												"programs",
												"{{edifyqa_program4_id}}",
												"sessions"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get sessions on program NAS PROG ID",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 404\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(\"Program does not belong error message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorMessage).to.eql(`The program id ${pm.environment.get(\"littera_program_id\")} does not belong to organization ${pm.environment.get(\"edifyqa_org_id\")}`);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{base_url}}/api/v1/organizations/{{edifyqa_org_id}}/programs/{{littera_program_id}}/sessions",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"api",
												"v1",
												"organizations",
												"{{edifyqa_org_id}}",
												"programs",
												"{{littera_program_id}}",
												"sessions"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get sessions on program NO AUTH",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{base_url}}/api/v1/organizations/{{edifyqa_org_id}}/programs/{{edifyqa_program4_id}}/sessions",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"api",
												"v1",
												"organizations",
												"{{edifyqa_org_id}}",
												"programs",
												"{{edifyqa_program4_id}}",
												"sessions"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{cognito_jwt}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// JSON request configuration",
					"const postRequest = {",
					"    url: `https://${pm.environment.get(\"cognito_environment\")}.auth.us-east-1.amazoncognito.com/oauth2/token`,",
					"    method: 'POST',",
					"    header: {",
					"        'Content-Type' : 'application/x-www-form-urlencoded',",
					"        'Authorization' : `Basic ${pm.environment.get(\"cognito_base64\")}`},",
					"    body: {",
					"        mode: 'urlencoded',",
					"        urlencoded: [",
					"            {key: \"grant_type\", value: \"client_credentials\", disabled: false}",
					"        ]",
					"    }",
					"};",
					"",
					"// POST request",
					"pm.sendRequest(postRequest, (error, response) => {",
					"    pm.environment.set(\"cognito_jwt\", response.json().access_token);",
					"});"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}